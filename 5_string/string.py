''' ----------Строки - Работа со строками---------------------
Если строка длинная, ее можно разбить на части и разместить их на разных строках кода.
В этом случае вся строка заключается в круглые скобки, а ее отдельные части - в кавычки:
'''
# text = ("Laudate omnes gentes laudate "
#         "Magnificat in secula ")
# print(text)

'''
Если же мы хотим определить многострочный текст, то такой текст заключается в тройные
двойные или одинарные кавычки:
'''
# text = '''Laudate omnes gentes laudate
# Magnificat in secula
# Et anima mea laudate
# Magnificat in secula 
# '''
# print(text)
'''
Управляющие последовательности в строке
Строка может содержать ряд специальных символов - управляющих последовательностей или escape-последовательности. Некоторые из них:
\: позволяет добавить внутрь строки слеш
\': позволяет добавить внутрь строки одинарную кавычку
\": позволяет добавить внутрь строки двойную кавычку
\n: осуществляет переход на новую строку
\t: добавляет табуляцию (4 отступа)
Используем некоторые последовательностей:
'''
# text = "Message:\n\"Hello World\""
# print(text)
'''
Здесь переменная path содержит некоторый путь к файлу. Однако внутри строки встречаются
символы "\n", которые будут интерпретированы как управляющая последовательность.
Чтобы избежать подобной ситуации, перед строкой ставится символ r
'''
# path = r"C:\python\name.txt"
# print(path)
'''
Вставка значений в строку
Python позволяет встравивать в строку значения других переменных. Для этого внутри строки
 переменные размещаются в фигурных скобках {}, а перед всей строкой ставится символ f:
'''
# userName = "Tom"
# userAge = 37
# user = f"name: {userName}  age: {userAge}"
# print(user)   # name: Tom  age: 37
'''
Обращение к символам строки
И мы можем обратиться к отдельным символам строки по индексу в квадратных скобках:
'''
# string = "hello world"
# c0 = string[0]  # h
# print(c0)
# c6 = string[6]  # w
# print(c6)
 
# c10 = string[10]  # d
# print(c10)
'''
Перебор строки
С помощью цикла for можно перебрать все символы строки:
'''
# string = "hello world"
# for char in string:
#     print(char)
''' --------Получение подстроки------------
При необходимости мы можем получить из строки не только отдельные символы, но и подстроку.
Для этого используется следующий синтаксис:
 
string[:end]: извлекается последовательность символов начиная 
с 0-го индекса по индекс end (не включая)

string[start:end]: извлекается последовательность символов начиная
с индекса start  по индекс end (не включая)

string[start:end:step]: извлекается последовательность символов начиная 
с индекса start по индекс end (не включая) через шаг step
'''
# string = "hello world"
 
# # с 0 до 5 индекса
# sub_string1 = string[:5]
# print(sub_string1)      # hello
 
# # со 2 до 5 индекса
# sub_string2 = string[2:5]
# print(sub_string2)      # llo
 
# # с 2 по 9 индекса через один символ
# sub_string3 = string[2:9:2]
# print(sub_string3)      # lowr
''' --------Объединение строк----------------
Одной из самых распространенных операций со строками является их объединение 
или конкатенация. Для объединения строк применяется операция сложения:
'''
# name = "Tom"
# surname = "Smith"
# fullname = name + " " + surname
# print(fullname)  # Tom Smith
''' Если нам надо сложить строку и число? 
В этом случае необходимо привести число к строке с помощью функции str():
'''
# name = "Tom"
# age = 33
# info = "Name: " + name + " Age: " + str(age)
# print(info)  # Name: Tom Age: 33
''' ---------Сравнение строк-----------
Особо следует сказать о сравнении строк. При сравнении строк принимается во
внимание символы и их регистр. Так, цифровой символ условно меньше, чем любой
алфавитный символ. Алфавитный символ в верхнем регистре условно меньше, чем
алфавитные символы в нижнем регистре. Например:
'''
# str1 = "1a"
# str2 = "aa"
# str3 = "Aa"
# print(str1 > str2)  # False, так как первый символ в str1 - цифра
# print(str2 > str3)  # True, так как первый символ в str2 - в нижнем регистре
''' ---------------------- 
Функция lower() приводит строку к нижнему регистру, а функция upper() - к верхнему.
'''
# str1 = "Tom"
# str2 = "tom"
# print(str1 == str2)  # False - строки не равны
 
# print(str1.lower() == str2.lower())  # True
''' -----------------Функции ord и len-------------------------
Поскольку строка содержит символы Unicode, то с помощью функции ord() мы можем 
получить числовое значение для символа в кодировке Unicode:

print(ord("A"))     # 65
Для получения длины строки можно использовать функцию len():

string = "hello world"
length = len(string)
print(length)   # 11
'''

''' --------Поиск в строке---------
С помощью выражения term in string можно найти подстроку term в строке string. 
Если подстрока найдена, то выражение вернет значение True, иначе возвращается 
значение False:
'''
# string = "hello world"
# exist = "hello" in string
# print(exist)    # True
 
# exist = "sword" in string
# print(exist)    # False

''' -------------------Основные методы строк------------------------------
isalpha(): возвращает True, если строка состоит только из алфавитных символов
islower(): возвращает True, если строка состоит только из символов в нижнем регистре
isupper(): возвращает True, если все символы строки в верхнем регистре
isdigit(): возвращает True, если все символы строки - цифры
isnumeric(): возвращает True, если строка представляет собой число
startswith(str): возвращает True, если строка начинается с подстроки str
endswith(str): возвращает True, если строка заканчивается на подстроку str
lower(): переводит строку в нижний регистр
upper(): переводит строку в вехний регистр
title(): начальные символы всех слов в строке переводятся в верхний регистр
capitalize(): переводит в верхний регистр первую букву только самого первого слова строки
lstrip(): удаляет начальные пробелы из строки
rstrip(): удаляет конечные пробелы из строки
strip(): удаляет начальные и конечные пробелы из строки
ljust(width): если длина строки меньше параметра width, то справа от строки 
добавляются пробелы, чтобы дополнить значение width, а сама строка выравнивается 
по левому краю
rjust(width): если длина строки меньше параметра width, то слева от строки 
добавляются пробелы, чтобы дополнить значение width, а сама строка выравнивается
по правому краю
center(width): если длина строки меньше параметра width, то слева и справа от строки
равномерно добавляются пробелы, чтобы дополнить значение width, а сама строка 
выравнивается по центру
find(str[, start [, end]): возвращает индекс подстроки в строке. Если подстрока 
не найдена, возвращается число -1
replace(old, new[, num]): заменяет в строке одну подстроку на другую
split([delimeter[, num]]): разбивает строку на подстроки в зависимости от разделителя
partition(delimeter): разбивает строку по разделителю на три подстроки и 
возвращает кортеж из трех элементов - подстрока до разделителя, разделитель и 
подстрока после разделителя
join(strs): объединяет строки в одну строку, вставляя между ними определенный разделитель
'''
# -----------------------------
# мы ожидаем ввод с клавиатуры числа, то перед преобразованием введенной строки в число можно
#  проверить, с помощью метода isnumeric() введено ли в действительности число, и если так,
#  то выполнить операцию преобразования:
# ------------------------------
# string = input("Введите число: ")
# if string.isnumeric():
#     number = int(string)
#     print(number)
# -------------------------------
# Проверка, начинается или оканчивается строка на определенную подстроку:

# file_name = "hello.py"
 
# starts_with_hello = file_name.startswith("hello")   # True
# ends_with_exe = file_name.endswith("exe")           # False
# -------------------------------------------
# Удаление пробелов в начале и в конце строки:
# string = "   hello  world!  "
# string = string.strip()
# print(string)           # hello  world!
# ----------Дополнение строки пробелами и выравнивание:------------------
# print("iPhone 7:".rjust(20), "52000".rjust(20))
# print("Huawei P10:".rjust(20), "36000".rjust(20))

# print("iPhone 7:".ljust(20), "52000".ljust(20))
# print("Huawei P10:".ljust(20), "36000".ljust(20))

# print("iPhone 7:".center(20), "52000".center(20))
# print("Huawei P10:".center(20), "36000".center(20))
'''------------------Поиск в строке-------------------------
Для поиска подстроки в строке в Python применяется метод find(),
 который возвращает индекс первого вхождения подстроки в строку и имеет три формы:
find(str): поиск подстроки str ведется с начала строки до ее конца
find(str, start): параметр start задает начальный индекс,
 с которого будет производиться поиск
find(str, start, end): параметр end задает конечный индекс, 
до которого будет идти поиск
Если подстрока не найдена, метод возвращает -1:
'''
# welcome = "Hello world! Goodbye world!"
# index = welcome.find("wor")
# print(index)       # 6
 
# # поиск с 10-го индекса
# index = welcome.find("wor",10)
# print(index)       # 21
 
# # поиск с 10 по 15 индекс
# index = welcome.find("wor",10,15)
# print(index)       # -1

'''  -------------------Замена в строке--------------------------------
Для замены в строке одной подстроки на другую применяется метод replace():
replace(old, new): заменяет подстроку old на new
replace(old, new, num): параметр num указывает, сколько вхождений подстроки old надо
 заменить на new. По умолчанию num равно -1, что соответствует первой версии метода 
и приводит к замене всех вхождений.
--------------------------------------------------------
'''

# phone = "+1-234-567-89-10"
 
# # замена дефисов на пробел
# edited_phone = phone.replace("-", " ")
# print(edited_phone)     # +1 234 567 89 10
 
# # удаление дефисов
# edited_phone = phone.replace("-", "")
# print(edited_phone)     # +12345678910
 
# # замена только первого дефиса
# edited_phone = phone.replace("-", "", 1)
# print(edited_phone)     # +1234-567-89-10

''' ----------------Разделение на подстроки----------------------------------------
Метод split() разбивает строку на список подстрок в зависимости от разделителя.
В качестве разделителя может выступать любой символ или последовательность символов. 
Данный метод имеет следующие формы:
split(): в качестве разделителя используется пробел
split(delimeter): в качестве разделителя используется delimeter
split(delimeter, num): параметр num указывает, сколько вхождений delimeter
используется для разделения. Оставшаяся часть строки добавляется в список 
без разделения на подстроки
-----------------------------------------------------------
'''
# text = "Это был огромный, в два обхвата дуб, с обломанными ветвями и с обломанной корой"
# # разделение по пробелам
# splitted_text = text.split()
# print(splitted_text)
# print(splitted_text[6])     # дуб,
 
# # разбиение по запятым
# splitted_text = text.split(",")
# print(splitted_text)
# print(splitted_text[1])     # в два обхвата дуб
 
# # разбиение по первым пяти пробелам
# splitted_text = text.split(" ", 5)
# print(splitted_text)        
# print(splitted_text[5])     # обхвата дуб, с обломанными ветвями и с обломанной корой

'''
Еще один метод - partition() разбивает строку по разделителю на три подстроки
 и возвращает кортеж из трех элементов - подстрока до разделителя, разделитель 
 и подстрока после разделителя:
'''
# text = "Это был огромный, в два обхвата дуб, с обломанными ветвями и с обломанной корой"
# text_parts = text.partition("дуб")
# print(text_parts)
# # ('Это был огромный, в два обхвата ', 'дуб', ', с обломанными ветвями и с обломанной корой')

'''
------------------------------------------------
Соединение строк
При рассмотрении простейших операций со строками было показано, как объединять строки
с помощью операции сложения. Другую возможность для соединения строк представляет
метод join(): он объединяет список строк. Причем текущая строка, у которой
вызывается данный метод, используется в качестве разделителя:
-------------------------------------------------
'''
# words = ["Let", "me", "speak", "from", "my", "heart", "in", "English"]
 
# # разделитель - пробел
# sentence = " ".join(words)
# print(sentence)  # Let me speak from my heart in English
 
# # разделитель - вертикальная черта
# sentence = " | ".join(words)
# print(sentence)  # Let | me | speak | from | my | heart | in | English

# '''
# Вместо списка в метод join можно передать простую строку, тогда
#  разделитель будет вставляться между символами этой строки:
# '''
# word = "hello"
# joined_word = "|".join(word)
# print(word)
# print(joined_word)      # h|e|l|l|o
'''--------------------------------------
Возникают ситуации, когда в некоторых задачах необходимо поработать со строкой,
которую ввел пользователь. Например: необходимо сделать все буквы маленькими, или
поменять все буквы “ё” на “е”.
'''
# text = 'СъЕШЬ ещё этих МяГкИх французских булок'

# print(len(text)) # 39
# print('ещё' in text) # True
# print(text.lower()) # съешь ещё этих мягких французских булок
# print(text.upper()) # СЪЕШЬ ЕЩЁ ЭТИХ МЯГКИХ ФРАНЦУЗСКИХ БУЛОК
# print(text.replace('ещё','ЕЩЁ')) # СъЕШЬ ЕЩЁ этих МяГкИх французских булок
'''
------------------------------------------------
● Мы представляем строку в виде массива символов. Значит мы можем обращаться к
элементам по индексам.
● Отрицательное число в индексе — счёт с конца строки
------------------------------------------------
'''
# print(text[0]) # c
# print(text[1]) # ъ
# print(text[len(text)-1]) # к
# print(text[-5]) # б
# print(text[:]) # съешь ещё этих мягких французских булок
# print(text[:2]) # съ
'''
------------------------------------------------
● Мы представляем строку в виде массива символов. Значит мы можем обращаться к
элементам по индексам.
● Отрицательное число в индексе — счёт с конца строки
------------------------------------------------
'''
# print(text[len(text)-2:]) # ок
# print(text[2:9]) # ешь ещё
# print(text[6:-18]) # ещё этих мягких
# print(text[0:len(text):6]) # сеикакл
# print(text[::6]) # сеикакл
# text = text[2:9] + text[-5] + text[:2] # ...
